// Code generated by goagen v1.2.0-dirty, DO NOT EDIT.
//
// API "cellar": bottle Resource Client
//
// Command:
// $ goagen
// --design=github.com/goadesign/goa-cellar/design
// --out=$(GOPATH)/src/github.com/goadesign/goa-cellar
// --version=v1.2.0-dirty

package client

import (
	"bytes"
	"context"
	"fmt"
	"golang.org/x/net/websocket"
	"net/http"
	"net/url"
	"strconv"
)

// CreateBottlePayload is the bottle create action payload.
type CreateBottlePayload struct {
	Color     string  `form:"color" json:"color" xml:"color"`
	Country   *string `form:"country,omitempty" json:"country,omitempty" xml:"country,omitempty"`
	Name      string  `form:"name" json:"name" xml:"name"`
	Region    *string `form:"region,omitempty" json:"region,omitempty" xml:"region,omitempty"`
	Review    *string `form:"review,omitempty" json:"review,omitempty" xml:"review,omitempty"`
	Sweetness *int    `form:"sweetness,omitempty" json:"sweetness,omitempty" xml:"sweetness,omitempty"`
	Varietal  string  `form:"varietal" json:"varietal" xml:"varietal"`
	Vineyard  string  `form:"vineyard" json:"vineyard" xml:"vineyard"`
	Vintage   int     `form:"vintage" json:"vintage" xml:"vintage"`
}

// CreateBottlePath computes a request path to the create action of bottle.
func CreateBottlePath(accountID int) string {
	param0 := strconv.Itoa(accountID)

	return fmt.Sprintf("/cellar/accounts/%s/bottles", param0)
}

// Record new bottle
func (c *Client) CreateBottle(ctx context.Context, path string, payload *CreateBottlePayload, contentType string) (*http.Response, error) {
	req, err := c.NewCreateBottleRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewCreateBottleRequest create the request corresponding to the create action endpoint of the bottle resource.
func (c *Client) NewCreateBottleRequest(ctx context.Context, path string, payload *CreateBottlePayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	return req, nil
}

// DeleteBottlePath computes a request path to the delete action of bottle.
func DeleteBottlePath(accountID int, bottleID int) string {
	param0 := strconv.Itoa(accountID)
	param1 := strconv.Itoa(bottleID)

	return fmt.Sprintf("/cellar/accounts/%s/bottles/%s", param0, param1)
}

// DeleteBottle makes a request to the delete action endpoint of the bottle resource
func (c *Client) DeleteBottle(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewDeleteBottleRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewDeleteBottleRequest create the request corresponding to the delete action endpoint of the bottle resource.
func (c *Client) NewDeleteBottleRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ListbarBottlePath computes a request path to the listbar action of bottle.
func ListbarBottlePath(accountID int) string {
	param0 := strconv.Itoa(accountID)

	return fmt.Sprintf("/cellar/accounts/%s/bottles/bar", param0)
}

// List all bottles in account optionally filtering by year
func (c *Client) ListbarBottle(ctx context.Context, path string, years []int) (*http.Response, error) {
	req, err := c.NewListbarBottleRequest(ctx, path, years)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListbarBottleRequest create the request corresponding to the listbar action endpoint of the bottle resource.
func (c *Client) NewListbarBottleRequest(ctx context.Context, path string, years []int) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	values := u.Query()
	for _, p := range years {
		tmp15 := strconv.Itoa(p)
		values.Add("years", tmp15)
	}
	u.RawQuery = values.Encode()
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// ListfooBottlePath computes a request path to the listfoo action of bottle.
func ListfooBottlePath(accountID int) string {
	param0 := strconv.Itoa(accountID)

	return fmt.Sprintf("/cellar/accounts/%s/bottles/foo", param0)
}

// List all bottles in account optionally filtering by year
func (c *Client) ListfooBottle(ctx context.Context, path string, years []int) (*http.Response, error) {
	req, err := c.NewListfooBottleRequest(ctx, path, years)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewListfooBottleRequest create the request corresponding to the listfoo action endpoint of the bottle resource.
func (c *Client) NewListfooBottleRequest(ctx context.Context, path string, years []int) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	values := u.Query()
	for _, p := range years {
		tmp16 := strconv.Itoa(p)
		values.Add("years", tmp16)
	}
	u.RawQuery = values.Encode()
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// RateBottlePayload is the bottle rate action payload.
type RateBottlePayload struct {
	Rating int `form:"rating" json:"rating" xml:"rating"`
}

// RateBottlePath computes a request path to the rate action of bottle.
func RateBottlePath(accountID int, bottleID int) string {
	param0 := strconv.Itoa(accountID)
	param1 := strconv.Itoa(bottleID)

	return fmt.Sprintf("/cellar/accounts/%s/bottles/%s/actions/rate", param0, param1)
}

// RateBottle makes a request to the rate action endpoint of the bottle resource
func (c *Client) RateBottle(ctx context.Context, path string, payload *RateBottlePayload, contentType string) (*http.Response, error) {
	req, err := c.NewRateBottleRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewRateBottleRequest create the request corresponding to the rate action endpoint of the bottle resource.
func (c *Client) NewRateBottleRequest(ctx context.Context, path string, payload *RateBottlePayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("PUT", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	return req, nil
}

// ShowBottlePath computes a request path to the show action of bottle.
func ShowBottlePath(accountID int, bottleID int) string {
	param0 := strconv.Itoa(accountID)
	param1 := strconv.Itoa(bottleID)

	return fmt.Sprintf("/cellar/accounts/%s/bottles/%s", param0, param1)
}

// Retrieve bottle with given id
func (c *Client) ShowBottle(ctx context.Context, path string) (*http.Response, error) {
	req, err := c.NewShowBottleRequest(ctx, path)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewShowBottleRequest create the request corresponding to the show action endpoint of the bottle resource.
func (c *Client) NewShowBottleRequest(ctx context.Context, path string) (*http.Request, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, err
	}
	return req, nil
}

// UpdateBottlePath computes a request path to the update action of bottle.
func UpdateBottlePath(accountID int, bottleID int) string {
	param0 := strconv.Itoa(accountID)
	param1 := strconv.Itoa(bottleID)

	return fmt.Sprintf("/cellar/accounts/%s/bottles/%s", param0, param1)
}

// UpdateBottle makes a request to the update action endpoint of the bottle resource
func (c *Client) UpdateBottle(ctx context.Context, path string, payload *BottlePayload, contentType string) (*http.Response, error) {
	req, err := c.NewUpdateBottleRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewUpdateBottleRequest create the request corresponding to the update action endpoint of the bottle resource.
func (c *Client) NewUpdateBottleRequest(ctx context.Context, path string, payload *BottlePayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("PATCH", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	return req, nil
}

// WatchBottlePath computes a request path to the watch action of bottle.
func WatchBottlePath(accountID int, bottleID int) string {
	param0 := strconv.Itoa(accountID)
	param1 := strconv.Itoa(bottleID)

	return fmt.Sprintf("/cellar/accounts/%s/bottles/%s/watch", param0, param1)
}

// Retrieve bottle with given id
func (c *Client) WatchBottle(ctx context.Context, path string) (*websocket.Conn, error) {
	scheme := c.Scheme
	if scheme == "" {
		scheme = "ws"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	url_ := u.String()
	cfg, err := websocket.NewConfig(url_, url_)
	if err != nil {
		return nil, err
	}
	return websocket.DialConfig(cfg)
}
